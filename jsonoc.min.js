class JSONoC { static #a; static fetch = async (e, l, t) => { let a = document; if (!this.#a) { this.#a = a.createElement("iframe"); let i = this.#a.style; i.visibility = "hidden", i.position = "absolute", a.body.appendChild(this.#a), await new Promise(e => { this.#a.onload = () => { e() } }) } let r = this.#a.contentWindow.document, c = a.createElement("p"), p, n = new Promise((e, t) => { p = setTimeout(() => { c.remove(), t("timeout") }, l) }); r.body.appendChild(c); let s = c.attachShadow({ mode: "open" }), d = r.createElement("link"); d.rel = "stylesheet", d.href = e; let o = new Promise((e, l) => { d.onload = () => { try { let t = getComputedStyle(s.childNodes[1]).getPropertyValue("--j"); e(JSON.parse(t.trim().slice(1, -1).replaceAll("$5", "`").replaceAll("$4", "'").replaceAll("$3", "\\").replaceAll("$2", '\\"').replaceAll("$1", "\\\\").replaceAll("$0", "$"))) } catch (a) { l(a) } finally { c.remove(), clearTimeout(p) } } }); s.appendChild(d); let h = a.createElement("p"); return h.id = `_${t}`, s.appendChild(h), await Promise.race([n, o]) }; static cnv = (e, l) => `#${CSS.escape(`_${l}`)}{--j:'${JSON.stringify(e).replaceAll("$", "$0").replaceAll("\\\\", "$1").replaceAll('\\"', "$2").replaceAll("\\", "$3").replaceAll("'", "$4").replaceAll("`", "$5")}';}` }